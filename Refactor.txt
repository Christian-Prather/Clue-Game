	
//////////////////////////////////BEFORE//////////////////////////////


//////////////////////////////////AFTER///////////////////////////////

	public void loadBoardConfig() throws BadConfigFormatException
	{
		// Set default walkway key for our room
		Character walkwayKey = 'w';
		File file;
		Scanner scanner;

		// FileNotFoundException
		try 
		{
			 file = new File(boardConfigFile);
			 scanner = new Scanner(file);
		
			
			
			for (Map.Entry<Character, String> entry : legend.entrySet())
			{
				if(entry.getValue().equals("Walkway"))
				{
					walkwayKey = entry.getKey();
				}
			}
			
			// Get the dimensions (this is a dumb way of doing this but quick
			// Check that there are consistent column numbers
			int oldColumns = 0; 
			boolean notFirstRun = false;
			board = new BoardCell[MAX_BOARD_SIZE][MAX_BOARD_SIZE];
			int row = 0;
			while (scanner.hasNextLine())
			{
				numRows++;
				String line = scanner.nextLine();
				String[] elements = line.split(",");
				numColumns = elements.length;
				if (numColumns != oldColumns && notFirstRun)
				{
					throw new BadConfigFormatException();
				}
				notFirstRun = true;
				oldColumns = numColumns;

				int column = 0;
				while (column < elements.length)
				{
					BoardCell tempCell = new BoardCell(row, column);
					tempCell.initial = elements[column].charAt(0);

						// Checking that the inital parsed from the board is actually in the legend
						boolean match = false;
						for (Character key : legend.keySet())
						{
							if(tempCell.initial ==  key)
							{
								match = true;
							}
						}
	
						if (!match)
						{
							throw new BadConfigFormatException();
						}

					// This cell is a door
					if (elements[column].length() > 1)
					{
						// Multi Character spot (door)
						tempCell.doorway = true;
						switch (elements[column].charAt(1))
						{
						case 'U':
							tempCell.doorDirection = DoorDirection.UP;
							break;
						case 'D':
							tempCell.doorDirection = DoorDirection.DOWN;
							break;
						case 'L':
							tempCell.doorDirection = DoorDirection.LEFT;
							break;
						case 'R':
							tempCell.doorDirection = DoorDirection.RIGHT;
							break;
						case 'N':
							tempCell.doorDirection = DoorDirection.NONE;
							break;
						};
						
					}
					// Cell is a walkway		
					else if(tempCell.initial == walkwayKey)
					{
						tempCell.walkway = true;
					}
					// Cell is a room
					else
					{
						tempCell.room = true;
					}
					// Add cell to board matrix
					board[row][column] = tempCell;
					column++;	
				}
				row++;

			}
			scanner.close();
	}
			catch (FileNotFoundException e) 
			{
				e.printStackTrace();
			}

} 